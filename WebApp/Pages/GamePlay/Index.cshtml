@page
@using Domain
@using GameEngine
@model WebApp.Pages.GamePlay.Index
@{
    ViewData["Title"] = "BattleShips - Game Play";
}
@functions
{
    private string[] ColLetters(int boardWidth)
    {
        var colLetters = new string[boardWidth];
        var counter = 0;
        for (var i = 'A'; i <= 'Z'; i++)
        {
            if (counter == boardWidth)
            {
                break;
            }
            if (counter == 26)
            {
                break;
            }

            colLetters[counter] = i.ToString();
            counter++;
        }
        return colLetters;
    }

    string ColWidth()
    {
        return 100 / (Model.Game!.GameOption.BoardWidth + 1) + "%";
    }
    
    string GetTdStyle(int row, int col, int posX, int posY, bool isShipHorizontal, int? shipSize)
    {
        var positions = ShipPositions(isShipHorizontal ? posX : posY, shipSize);
        if (NeededBoardCount() > 1)
        {
            return "bg-white";
        }
        switch (isShipHorizontal)
        {
            case true when positions.Contains(col) && posY == row:
            case false when posX == col && positions.Contains(row):
                return "bg-primary";
        }
        return "bg-white";
    }

    string GetBoardElements(BoardSquareState squareState, List<GameShip> sunkenGameShips)
    {
        
        if (squareState.GameShipOnBoardNr > 0 && squareState.Bomb == 0)
        {
            return "<i class=\"fas fa-ship\"></i>";
                                  
        }
        if (squareState.Bomb > 0 && squareState.GameShipOnBoardNr == 0)
        {
            return "<i class=\"fas fa-times\"></i>";
        }

        if (squareState.Bomb > 0 && squareState.GameShipOnBoardNr > 0)
        {
            return sunkenGameShips.Any(sunkenGameShip => sunkenGameShip.GameShipOnBoard == squareState.GameShipOnBoardNr && sunkenGameShip.IsSunken)
                ? "<i class=\"fas fa-burn\"></i>" : "<i class=\"fas fa-bomb\"></i>";
        }
        return "&nbsp;";
    }
    private static List<int> ShipPositions(int startIndex, int? shipSize)
    {
        if (shipSize == null)
        {
            return new List<int>() {startIndex};
        }
        List<int> sizes = new();
        for (var i = startIndex; i < startIndex + shipSize; i++)
        {
            sizes.Add(i);
        }

        return sizes;
    }

    private string CurrentShip(int id)
    {
        if (Model.CurrentGameShip != null && Model.CurrentGameShip.GameShipId == id)
        {
            return "bg-light active-item";
        }
        return "bg-white";
    }

    private int NeededBoardCount()
    {
        if (Model.BattleShips!.GetUnaddedGameShips().Count > 0)
        {
            return 1;
        }
        return 2;
    }

    string GameStatusInfo(string name, int? unAddedShipCount, bool isGameOver)
    {
        var status = unAddedShipCount switch
        {
            > 0 => "Add Ships",
            0 when !isGameOver => "Place a Bomb!",
            _ => "is a Winner"
            };
        return $"{name} {status}";
    }

    static string FitBoardToScreen(int boardAmount, int boardWidth)
    {
        if (boardAmount == 1 && boardWidth > 15)
        {
            return "col-8";
        }
        if (boardAmount == 1 || boardWidth < 16)
        {
            return "col-6";
        }
        return "col-12";

    }
    
}
<div class="text-center mb-5">
    <h1>@Html.Raw(GameStatusInfo(Model.BattleShips?.GetPlayer(true).Name ?? "", Model.BattleShips!.GetUnaddedGameShips().Count, Model.IsGameOver))</h1>
</div>

    
<div class="row justify-content-between">
    @if (Model.BattleShips.GetUnaddedGameShips().Count > 0)
    {
        <div class="col-3">
            <div class="row">
                <div class="col-2">
                    <table class="table table-borderless controls">
                        <tr>
                            <td>
                                <a asp-route-id="@Model.Game?.GameId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY"
                                   asp-route-shipId="@Model.CurrentGameShip?.GameShipId" asp-route-horizontal="@Model.IsShipHorizontal" asp-route-dir="up-left">
                                    <i class="fas fa-long-arrow-alt-up" style="transform: rotate(-45deg);"></i>
                                </a>
                            </td>
                            <td>
                                <a asp-route-id="@Model.Game?.GameId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY"
                                   asp-route-shipId="@Model.CurrentGameShip?.GameShipId" asp-route-horizontal="@Model.IsShipHorizontal" asp-route-dir="up">
                                    <i class="far fa-arrow-alt-circle-up"></i>
                                </a>
                            </td>
                            <td>
                                <a asp-route-id="@Model.Game?.GameId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY"
                                   asp-route-shipId="@Model.CurrentGameShip?.GameShipId" asp-route-horizontal="@Model.IsShipHorizontal" asp-route-dir="up-right">
                                    <i class="fas fa-long-arrow-alt-up" style="transform: rotate(45deg);"></i>
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <a asp-route-id="@Model.Game?.GameId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY"
                                   asp-route-shipId="@Model.CurrentGameShip?.GameShipId" asp-route-horizontal="@Model.IsShipHorizontal" asp-route-dir="left">
                                    <i class="far fa-arrow-alt-circle-left"></i>
                                </a>
                            </td>
                            <td>
                                <a asp-route-id="@Model.Game?.GameId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY"
                                   asp-route-shipId="@Model.CurrentGameShip?.GameShipId" asp-route-horizontal="@Model.IsShipHorizontal" asp-route-dir="rotate">
                                    <i class="fas fa-undo"></i>
                                </a>
                            </td>
                            <td>
                                <a asp-route-id="@Model.Game?.GameId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY"
                                   asp-route-shipId="@Model.CurrentGameShip?.GameShipId" asp-route-horizontal="@Model.IsShipHorizontal" asp-route-dir="right">
                                    <i class="far fa-arrow-alt-circle-right"></i>
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <a asp-route-id="@Model.Game?.GameId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY"
                                   asp-route-shipId="@Model.CurrentGameShip?.GameShipId" asp-route-horizontal="@Model.IsShipHorizontal" asp-route-dir="down-left">
                                    <i class="fas fa-long-arrow-alt-down" style="transform: rotate(45deg);"></i>
                                </a>
                            </td>
                            <td>
                                <a asp-route-id="@Model.Game?.GameId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY"
                                   asp-route-shipId="@Model.CurrentGameShip?.GameShipId" asp-route-horizontal="@Model.IsShipHorizontal" asp-route-dir="down">
                                    <i class="far fa-arrow-alt-circle-down"></i>
                                </a>
                            </td>
                            <td>
                                <a asp-route-id="@Model.Game?.GameId" asp-route-posX="@Model.PosX" asp-route-posY="@Model.PosY"
                                   asp-route-shipId="@Model.CurrentGameShip?.GameShipId" asp-route-horizontal="@Model.IsShipHorizontal" asp-route-dir="down-right">
                                    <i class="fas fa-long-arrow-alt-down" style="transform: rotate(-45deg);"></i>
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="3">
                                <a asp-route-id="@Model.Game?.GameId" asp-route-x="@Model.PosX" asp-route-y="@Model.PosY"
                                   asp-route-shipId="@Model.CurrentGameShip?.GameShipId" asp-route-horizontal="@Model.IsShipHorizontal" asp-route-dir="place">
                                    <button type="button" class="btn btn-primary">Add Ship</button>
                                </a></td>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="row">
                <div class="col-3">
                    <table class="table">
                        <thead>
                        <tr>
                            <th>
                                Size
                            </th>
                            <th>
                                Name
                            </th>
                            <th></th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var item in Model.BattleShips.GetUnaddedGameShips())
                        {
                            <tr class="@CurrentShip(item.GameShipId)">
                                <td>
                                    @Html.DisplayFor(modelItem => item.Size)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Name)
                                </td>
                                <td>
                                    <a asp-route-id="@Model.Game?.GameId" asp-route-shipId="@item.GameShipId">
                                        <button type="button" class="btn btn-primary">Select</button>
                                    </a>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    @for (var b = 1; b <= NeededBoardCount(); b++)
    {
        <div class="@FitBoardToScreen(NeededBoardCount(), Model.Game!.GameOption.BoardWidth) text-center">
            @if (b == 1 && NeededBoardCount() == 1 || b == 2 && NeededBoardCount() == 2)
            {
                <h5>@Html.Raw(Model.BattleShips.GetPlayer(true).Name) Board</h5>
            }
            @if (b == 1 && NeededBoardCount() == 2)
            {
                <h5>@Html.Raw(Model.BattleShips.GetPlayer(false).Name) Board</h5>
            }
            <table class="table table-bordered table-sm">
                <tr>
                    <th scope="col" style="width: @ColWidth()">&nbsp;</th>
                    @for (var i = 0; i < Model.Game!.GameOption.BoardWidth; i++)
                    {
                        <th scope="col" style="width: @ColWidth()">
                            @Html.Raw(ColLetters(Model.Game.GameOption.BoardWidth)[i])
                        </th>
                    }
                </tr>
                <tbody>
                @for (var row = 0; row < Model.Game.GameOption.BoardHeight; row++)
                {
                    <tr>
                        <th scope="row">@Html.Raw(row + 1)</th>
                        @for (var col = 0; col < Model.Game!.GameOption.BoardWidth; col++)
                        {
                            if (NeededBoardCount() == 1)
                            {
                                <td class="@GetTdStyle(row, col, Model.PosX, Model.PosY, Model.IsShipHorizontal, Model.CurrentGameShip?.Size)">
                                    @Html.Raw(GetBoardElements(Model.CurrentPlayerBoard[col, row], Model.BattleShips.GetSunkenGameShips(true)))
                                </td>
                            }
                            else if (NeededBoardCount() == 2 && b == 1)
                            {
                                // If needed board count = 2 and we are printing first board, then we want to display opponent board
                                <td class="@GetTdStyle(row, col, Model.PosX, Model.PosY, Model.IsShipHorizontal, Model.CurrentGameShip?.Size) bomb-hover"
                                    onclick="window.location.href = '?move=shoot&x=@col&y=@row&id=@Model.Game?.GameId'" style="cursor: pointer">
                                    @Html.Raw(GetBoardElements(Model.OtherPlayerBoard![col, row], Model.BattleShips.GetSunkenGameShips(false)))
                                </td>
                            }
                            else
                            {
                                <td class="@GetTdStyle(row, col, Model.PosX, Model.PosY, Model.IsShipHorizontal, Model.CurrentGameShip?.Size)">
                                    @Html.Raw(GetBoardElements(Model.CurrentPlayerBoard[col, row], Model.BattleShips.GetSunkenGameShips(true)))
                                </td>
                            }

                        }
                    </tr>

                }
                </tbody>
            </table>
        </div>
    }
   
</div>